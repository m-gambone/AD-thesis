% Generated by ADiMat 0.6.2-5299 (cf36599d)
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2015 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to johannes@johannes-willkomm.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=der_S, der_I, der_E
%  - independents=S, I, E
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_VecFieldNoParODE, rec_VecFieldNoParODE,
%  ret_VecFieldNoParODE
%

function [a_S a_I a_E nr_der_S nr_der_I nr_der_E] = a_VecFieldNoParODE(S, I, E, tau, a_der_S, a_der_I, a_der_E)
%Funzione per il calcolo del campo vettoriale associato al modello SIR con vaccinazione
   n = length(E);
   mu = 1 / (75 * 365);
   p0 = 0.75;
   nu = 1 / 7;
   beta = 20 * (mu + nu);
   a = n / tau;
   c = 300;
   tmpda2 = 1 - p0;
   tmpca1 = c * E(n);
   p1 = min(tmpca1, tmpda2);
   k = 1;
   g = k * I;
   tmpca5 = beta * S;
   tmpca4 = tmpca5 * I;
   tmpca3 = mu * S;
   tmpca2 = 1 - p0 - p1;
   adimat_push1(tmpca1);
   tmpca1 = mu * tmpca2;
   der_S = tmpca1 - tmpca3 - tmpca4;
   adimat_push1(tmpca2);
   tmpca2 = beta * S;
   adimat_push1(tmpca1);
   tmpca1 = tmpca2 - mu - nu;
   der_I = I * tmpca1;
   adimat_push1(tmpca2);
   tmpca2 = a * E(1);
   adimat_push1(tmpca1);
   tmpca1 = a * g;
   tmplia1 = tmpca1 - tmpca2;
   der_E(1) = tmplia1;
   tmpfra1_2 = n;
   for i=2 : tmpfra1_2
      adimat_push1(tmpca3);
      tmpca3 = a * E(i);
      adimat_push1(tmpda2);
      tmpda2 = i - 1;
      adimat_push1(tmpca1);
      tmpca1 = a * E(tmpda2);
      adimat_push1(tmplia1);
      tmplia1 = tmpca1 - tmpca3;
      adimat_push_index1(der_E, i);
      der_E(i) = tmplia1;
   end
   adimat_push1(tmpfra1_2);
   nr_der_S = der_S;
   nr_der_I = der_I;
   nr_der_E = der_E;
   [a_p1 a_g a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_tmplia1 a_S a_I a_E] = a_zeros(p1, g, tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, tmplia1, S, I, E);
   if nargin < 5
      a_der_S = a_zeros1(der_S);
   end
   if nargin < 6
      a_der_I = a_zeros1(der_I);
   end
   if nargin < 7
      a_der_E = a_zeros1(der_E);
   end
   tmpfra1_2 = adimat_pop1;
   for i=fliplr(2 : tmpfra1_2)
      der_E = adimat_pop_index1(der_E, i);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_der_E(i))));
      a_der_E = a_zeros_index1(a_der_E, der_E, i);
      tmplia1 = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
      a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, -a_tmplia1));
      a_tmplia1 = a_zeros1(tmplia1);
      tmpca1 = adimat_pop1;
      a_E(tmpda2) = adimat_adjsum(a_E(tmpda2), adimat_adjmultr(E(tmpda2), a, a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpca3] = adimat_pop;
      a_E(i) = adimat_adjsum(a_E(i), adimat_adjmultr(E(i), a, a_tmpca3));
      a_tmpca3 = a_zeros1(tmpca3);
   end
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_der_E(1))));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, -a_tmplia1));
   tmpca1 = adimat_pop1;
   a_g = adimat_adjsum(a_g, adimat_adjmultr(g, a, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_E(1) = adimat_adjsum(a_E(1), adimat_adjmultr(E(1), a, a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   a_I = adimat_adjsum(a_I, adimat_adjmultl(I, a_der_I, tmpca1));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, I, a_der_I));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_S = adimat_adjsum(a_S, adimat_adjmultr(S, beta, a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_der_S));
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, -a_der_S));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, -a_der_S));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, mu, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   a_p1 = adimat_adjsum(a_p1, adimat_adjred(p1, -a_tmpca2));
   a_S = adimat_adjsum(a_S, adimat_adjmultr(S, mu, a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjmultl(tmpca5, a_tmpca4, I));
   a_I = adimat_adjsum(a_I, adimat_adjmultr(I, tmpca5, a_tmpca4));
   a_S = adimat_adjsum(a_S, adimat_adjmultr(S, beta, a_tmpca5));
   a_I = adimat_adjsum(a_I, adimat_adjmultr(I, k, a_g));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_min21(tmpca1, tmpda2, a_p1));
   a_E(n) = adimat_adjsum(a_E(n), adimat_adjmultr(E(n), c, a_tmpca1));
end

function [der_S der_I der_E] = rec_VecFieldNoParODE(S, I, E, tau)
   n = length(E);
   mu = 1 / (75 * 365);
   p0 = 0.75;
   nu = 1 / 7;
   beta = 20 * (mu + nu);
   a = n / tau;
   c = 300;
   tmpda2 = 1 - p0;
   tmpca1 = c * E(n);
   p1 = min(tmpca1, tmpda2);
   k = 1;
   g = k * I;
   tmpca5 = beta * S;
   tmpca4 = tmpca5 * I;
   tmpca3 = mu * S;
   tmpca2 = 1 - p0 - p1;
   adimat_push1(tmpca1);
   tmpca1 = mu * tmpca2;
   der_S = tmpca1 - tmpca3 - tmpca4;
   adimat_push1(tmpca2);
   tmpca2 = beta * S;
   adimat_push1(tmpca1);
   tmpca1 = tmpca2 - mu - nu;
   der_I = I * tmpca1;
   adimat_push1(tmpca2);
   tmpca2 = a * E(1);
   adimat_push1(tmpca1);
   tmpca1 = a * g;
   tmplia1 = tmpca1 - tmpca2;
   der_E(1) = tmplia1;
   tmpfra1_2 = n;
   for i=2 : tmpfra1_2
      adimat_push1(tmpca3);
      tmpca3 = a * E(i);
      adimat_push1(tmpda2);
      tmpda2 = i - 1;
      adimat_push1(tmpca1);
      tmpca1 = a * E(tmpda2);
      adimat_push1(tmplia1);
      tmplia1 = tmpca1 - tmpca3;
      adimat_push_index1(der_E, i);
      der_E(i) = tmplia1;
   end
   adimat_push(tmpfra1_2, n, mu, p0, nu, beta, a, c, p1, k, g, i, tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, tmpda2, tmplia1, der_S, der_I, der_E, S, I, E);
   if nargin > 3
      adimat_push1(tau);
   end
   adimat_push1(nargin);
end

function [a_S a_I a_E] = ret_VecFieldNoParODE(a_der_S, a_der_I, a_der_E)
   tmpnargin = adimat_pop1;
   if tmpnargin > 3
      tau = adimat_pop1;
   end
   [E I S der_E der_I der_S tmplia1 tmpda2 tmpca5 tmpca4 tmpca3 tmpca2 tmpca1 i g k p1 c a beta nu p0 mu n] = adimat_pop;
   [a_p1 a_g a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_tmplia1 a_S a_I a_E] = a_zeros(p1, g, tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, tmplia1, S, I, E);
   if nargin < 1
      a_der_S = a_zeros1(der_S);
   end
   if nargin < 2
      a_der_I = a_zeros1(der_I);
   end
   if nargin < 3
      a_der_E = a_zeros1(der_E);
   end
   tmpfra1_2 = adimat_pop1;
   for i=fliplr(2 : tmpfra1_2)
      der_E = adimat_pop_index1(der_E, i);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_der_E(i))));
      a_der_E = a_zeros_index1(a_der_E, der_E, i);
      tmplia1 = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
      a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, -a_tmplia1));
      a_tmplia1 = a_zeros1(tmplia1);
      tmpca1 = adimat_pop1;
      a_E(tmpda2) = adimat_adjsum(a_E(tmpda2), adimat_adjmultr(E(tmpda2), a, a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpca3] = adimat_pop;
      a_E(i) = adimat_adjsum(a_E(i), adimat_adjmultr(E(i), a, a_tmpca3));
      a_tmpca3 = a_zeros1(tmpca3);
   end
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_der_E(1))));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, -a_tmplia1));
   tmpca1 = adimat_pop1;
   a_g = adimat_adjsum(a_g, adimat_adjmultr(g, a, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_E(1) = adimat_adjsum(a_E(1), adimat_adjmultr(E(1), a, a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   a_I = adimat_adjsum(a_I, adimat_adjmultl(I, a_der_I, tmpca1));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, I, a_der_I));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_S = adimat_adjsum(a_S, adimat_adjmultr(S, beta, a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_der_S));
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, -a_der_S));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, -a_der_S));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, mu, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   a_p1 = adimat_adjsum(a_p1, adimat_adjred(p1, -a_tmpca2));
   a_S = adimat_adjsum(a_S, adimat_adjmultr(S, mu, a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjmultl(tmpca5, a_tmpca4, I));
   a_I = adimat_adjsum(a_I, adimat_adjmultr(I, tmpca5, a_tmpca4));
   a_S = adimat_adjsum(a_S, adimat_adjmultr(S, beta, a_tmpca5));
   a_I = adimat_adjsum(a_I, adimat_adjmultr(I, k, a_g));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_min21(tmpca1, tmpda2, a_p1));
   a_E(n) = adimat_adjsum(a_E(n), adimat_adjmultr(E(n), c, a_tmpca1));
end
